#user nginx;
worker_processes 1;

env JWT_SECRET;
#env JWT_SECRET_IS_BASE64_ENCODED;
env REDIS_HOST;
env REDIS_PORT;
env REDIS_DB;
env REDIS_AUTH;

events {
  worker_connections 1024;
}

http {
  default_type application/octet-stream;
  lua_package_path "/usr/local/openresty/luajit/?.lua;;";

  sendfile on;

  access_log "/logs/access.log";

  keepalive_timeout 65;

  #gzip on;

  server {
    listen 80;

    server_name $SERVER_NAME;

    proxy_set_header X-Forwarded-For $remote_addr;

    #charset utf-8;
    #access_log logs/host.access.log main;

    location / {
      #
      # Redis Configuration
      #
      # set $redhost "127.0.0.1";
      # set $redport 6379;
      # set $reddb 1;
      # set $redauth "your-redis-pass";

      #
      # (really) Wide-open CORS config for nginx
      #
      more_set_headers "Access-Control-Allow-Origin: $http_origin";
      more_set_headers "Access-Control-Allow-Credentials: true";
      more_set_headers "Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS";

      #
      # Custom headers and headers various browsers *should* be OK with but aren't
      #
      more_set_headers "Access-Control-Allow-Headers: Accept,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,X-Real-IP";
      more_set_headers "Access-Control-Expose-Headers: Accept,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,X-Real-IP";

      if ($request_method = "OPTIONS") {
        #
        # Tell client that this pre-flight info is valid for 20 days
        #
        more_set_headers "Access-Control-Max-Age: 1728000";
        more_set_headers "Content-Type: text/plain; charset=utf-8";
        more_set_headers "Content-Length: 0";
        return 204;
      }

      #
      # Token Auth Service
      #
      location /api/auth {
          include /conf/includes/proxy.conf;
          proxy_pass $TOKEN_URL;
      }

      #
      # User Service
      #
      location /api/user {
          include /conf/includes/proxy.conf;
          proxy_pass $USER_URL;
      }

      #
      # Api service
      #
      location /api {
        access_by_lua_file /conf/includes/check.lua;

        proxy_pass $API_URL;
      }

      #location /open/ {
      #  more_set_headers "Access-Control-Allow-Headers: openId";
      #  more_set_headers "Access-Control-Expose-Headers: openId";
      #
      #  proxy_pass https://some/open/endpoint/;
      #}

      error_page  404        /404.html;

      # redirect server error pages to the static page /50x.html
      #
      error_page 500 502 503 504 /50x.html;
      location = /50x.html {
        root html;
      }
    }
  }
}
